{
  "_args": [
    [
      {
        "raw": "redux-connect@git+https://github.com/CampusDiaries/redux-connect.git#20fabdae4bb84620ffee11d27c0718d28849ee6c",
        "scope": null,
        "escapedName": "redux-connect",
        "name": "redux-connect",
        "rawSpec": "git+https://github.com/CampusDiaries/redux-connect.git#20fabdae4bb84620ffee11d27c0718d28849ee6c",
        "spec": "git+https://github.com/CampusDiaries/redux-connect.git#20fabdae4bb84620ffee11d27c0718d28849ee6c",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:CampusDiaries/redux-connect.git#20fabdae4bb84620ffee11d27c0718d28849ee6c",
          "sshUrl": "git+ssh://git@github.com/CampusDiaries/redux-connect.git#20fabdae4bb84620ffee11d27c0718d28849ee6c",
          "httpsUrl": "git+https://github.com/CampusDiaries/redux-connect.git#20fabdae4bb84620ffee11d27c0718d28849ee6c",
          "gitUrl": "git://github.com/CampusDiaries/redux-connect.git#20fabdae4bb84620ffee11d27c0718d28849ee6c",
          "shortcut": "github:CampusDiaries/redux-connect#20fabdae4bb84620ffee11d27c0718d28849ee6c",
          "directUrl": "https://raw.githubusercontent.com/CampusDiaries/redux-connect/20fabdae4bb84620ffee11d27c0718d28849ee6c/package.json"
        }
      },
      "/home/subrat/Works.Office/Application/CampusDiaries/webapp-main"
    ]
  ],
  "_from": "git+https://github.com/CampusDiaries/redux-connect.git#20fabdae4bb84620ffee11d27c0718d28849ee6c",
  "_id": "redux-connect@2.4.0",
  "_inCache": true,
  "_installable": true,
  "_location": "/redux-connect",
  "_phantomChildren": {},
  "_requested": {
    "raw": "redux-connect@git+https://github.com/CampusDiaries/redux-connect.git#20fabdae4bb84620ffee11d27c0718d28849ee6c",
    "scope": null,
    "escapedName": "redux-connect",
    "name": "redux-connect",
    "rawSpec": "git+https://github.com/CampusDiaries/redux-connect.git#20fabdae4bb84620ffee11d27c0718d28849ee6c",
    "spec": "git+https://github.com/CampusDiaries/redux-connect.git#20fabdae4bb84620ffee11d27c0718d28849ee6c",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:CampusDiaries/redux-connect.git#20fabdae4bb84620ffee11d27c0718d28849ee6c",
      "sshUrl": "git+ssh://git@github.com/CampusDiaries/redux-connect.git#20fabdae4bb84620ffee11d27c0718d28849ee6c",
      "httpsUrl": "git+https://github.com/CampusDiaries/redux-connect.git#20fabdae4bb84620ffee11d27c0718d28849ee6c",
      "gitUrl": "git://github.com/CampusDiaries/redux-connect.git#20fabdae4bb84620ffee11d27c0718d28849ee6c",
      "shortcut": "github:CampusDiaries/redux-connect#20fabdae4bb84620ffee11d27c0718d28849ee6c",
      "directUrl": "https://raw.githubusercontent.com/CampusDiaries/redux-connect/20fabdae4bb84620ffee11d27c0718d28849ee6c/package.json"
    }
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "git+https://github.com/CampusDiaries/redux-connect.git#20fabdae4bb84620ffee11d27c0718d28849ee6c",
  "_shasum": "060873020f5f2d66953d0e8a75df8b27eb3c37d8",
  "_shrinkwrap": null,
  "_spec": "redux-connect@git+https://github.com/CampusDiaries/redux-connect.git#20fabdae4bb84620ffee11d27c0718d28849ee6c",
  "_where": "/home/subrat/Works.Office/Application/CampusDiaries/webapp-main",
  "author": {
    "name": "Vitaly Aminev",
    "email": "v@makeomatic.ru"
  },
  "bugs": {
    "url": "https://github.com/makeomatic/redux-connect/issues"
  },
  "contributors": [
    {
      "name": "Rodion Salnik",
      "url": "http://brocoders.com"
    }
  ],
  "dependencies": {
    "babel-runtime": "~6.x.x",
    "immutable": "^3.7.6",
    "redux-actions": "^0.9.1"
  },
  "description": "It allows you to request async data, store them in redux state and connect them to your react component.",
  "devDependencies": {
    "babel-cli": "^6.4.5",
    "babel-core": "^6.4.5",
    "babel-eslint": "^6.0.0",
    "babel-jest": "^12.0.2",
    "babel-plugin-transform-runtime": "^6.8.0",
    "babel-preset-es2015": "^6.3.13",
    "babel-preset-es2015-loose": "^7.0.0",
    "babel-preset-react": "^6.3.13",
    "babel-preset-react-optimize": "^1.0.1",
    "babel-preset-stage-0": "^6.3.13",
    "bluebird": "^3.3.3",
    "enzyme": "^2.2.0",
    "eslint": "^2.9.0",
    "eslint-config-airbnb": "^9.0.1",
    "eslint-plugin-import": "^1.6.1",
    "eslint-plugin-jsx-a11y": "^1.2.0",
    "eslint-plugin-react": "^5.0.1",
    "jest-cli": "^12.0.2",
    "react": "^15.0.0",
    "react-addons-test-utils": "^15.0.2",
    "react-dom": "^15.0.0",
    "react-redux": "^4.4.0",
    "react-router": "^2.4.0",
    "redux": "^3.3.1",
    "sinon": "^1.17.4"
  },
  "gitHead": "20fabdae4bb84620ffee11d27c0718d28849ee6c",
  "homepage": "https://github.com/makeomatic/redux-connect",
  "jest": {
    "automock": false,
    "scriptPreprocessor": "<rootDir>/node_modules/babel-jest"
  },
  "keywords": [
    "redux",
    "react",
    "connect",
    "async",
    "props"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "name": "redux-connect",
  "optionalDependencies": {},
  "peerDependencies": {
    "react": "0.14.x || 15.x.x",
    "react-router": "~2.x.x",
    "react-redux": "~4.x.x"
  },
  "readme": "ReduxConnect for React Router\n============\n[![npm version](https://img.shields.io/npm/v/redux-connect.svg?style=flat-square)](https://www.npmjs.com/package/redux-connect)\n[![Build Status](https://travis-ci.org/makeomatic/redux-connect.svg?branch=master)](https://travis-ci.org/makeomatic/redux-connect)\n\nHow do you usually request data and store it to redux state?\nYou create actions that do async jobs to load data, create reducer to save this data to redux state,\nthen connect data to your component or container.\n\nUsually it's very similar routine tasks.\n\nAlso, usually we want data to be preloaded. Especially if you're building universal app,\nor you just want pages to be solid, don't jump when data was loaded.\n\nThis package consist of 2 parts: one part allows you to delay containers rendering until some async actions are happening.\nAnother stores your data to redux state and connect your loaded data to your container.\n\n## Notice\n\nThis is a fork and refactor of [redux-async-connect](https://github.com/Rezonans/redux-async-connect)\n\n## Installation & Usage\n\nUsing [npm](https://www.npmjs.com/):\n\n`$ npm install redux-connect -S`\n\n```js\nimport { Router, browserHistory } from 'react-router';\nimport { ReduxAsyncConnect, asyncConnect, reducer as reduxAsyncConnect } from 'redux-connect'\nimport React from 'react'\nimport { render } from 'react-dom'\nimport { createStore, combineReducers } from 'redux';\n\n// 1. Connect your data, similar to react-redux @connect\n@asyncConnect([{\n  key: 'lunch',\n  promise: ({ params, helpers }) => Promise.resolve({ id: 1, name: 'Borsch' })\n}])\nclass App extends React.Component {\n  render() {\n    // 2. access data as props\n    const lunch = this.props.lunch\n    return (\n      <div>{lunch.name}</div>\n    )\n  }\n}\n\n// 3. Connect redux async reducer\nconst store = createStore(combineReducers({ reduxAsyncConnect }), window.__data);\n\n// 4. Render `Router` with ReduxAsyncConnect middleware\nrender((\n  <Provider store={store} key=\"provider\">\n    <Router render={(props) => <ReduxAsyncConnect {...props}/>} history={browserHistory}>\n      <Route path=\"/\" component={App}/>\n    </Router>\n  </Provider>\n), el)\n```\n\n### Server\n\n```js\nimport { renderToString } from 'react-dom/server'\nimport { match, RoutingContext } from 'react-router'\nimport { ReduxAsyncConnect, loadOnServer, reducer as reduxAsyncConnect } from 'redux-connect'\nimport createHistory from 'history/lib/createMemoryHistory';\nimport { Provider } from 'react-redux';\nimport { createStore, combineReducers } from 'redux';\n\napp.get('*', (req, res) => {\n  const store = createStore(combineReducers({ reduxAsyncConnect }));\n\n  match({ routes, location: req.url }, (err, redirect, renderProps) => {\n\n    // 1. load data\n    loadOnServer({ ...renderProps, store }).then(() => {\n\n      // 2. use `ReduxAsyncConnect` instead of `RoutingContext` and pass it `renderProps`\n      const appHTML = renderToString(\n        <Provider store={store} key=\"provider\">\n          <ReduxAsyncConnect {...renderProps} />\n        </Provider>\n      )\n\n      // 3. render the Redux initial data into the server markup\n      const html = createPage(appHTML, store)\n      res.send(html)\n    })\n  })\n})\n\nfunction createPage(html, store) {\n  return `\n    <!doctype html>\n    <html>\n      <body>\n        <div id=\"app\">${html}</div>\n\n        <!-- its a Redux initial data -->\n        <script dangerouslySetInnerHTML={{__html: `window.__data=${serialize(store.getState())};`}} charSet=\"UTF-8\"/>\n      </body>\n    </html>\n  `\n}\n```\n\n## [API](/docs/API.MD)\n\n## Usage with `applyRouterMiddleware`\n\nThanks to @mmahalwy for a good usage example\nPass custom `render` method to `ReduxAsyncConnect`, it can look like this:\n\n```js\n// on client\nconst component = (\n  <Router\n    render={(props) => (\n      <ReduxAsyncConnect\n        {...props}\n        helpers={{ client }}\n        filter={item => !item.deferred}\n        render={applyRouterMiddleware(useScroll())}\n      />\n    )}\n    history={history}\n    routes={getRoutes(store)}\n  />\n);\n```\n\nBasically what you do is instead of using render method like:\n\n```js\nconst render = props => <RouterContext {...props} />;\n```\n\nyou use\n\n```js\nconst render = applyRouterMiddleware(...middleware);\n```\n\n## Comparing with other libraries\n\nThere are some solutions of problem described above:\n\n- [**AsyncProps**](https://github.com/ryanflorence/async-props)\n  It solves the same problem, but it doesn't work with redux state. Also it's significantly more complex inside,\n  because it contains lots of logic to connect data to props.\n  It uses callbacks against promises...\n- [**react-fetcher**](https://github.com/markdalgleish/react-fetcher)\n  It's very simple library too. But it provides you only interface for decorating your components and methods\n  to fetch data for them. It doesn't integrated with React Router or Redux. So, you need to write you custom logic\n  to delay routing transition for example.\n- [**react-resolver**](https://github.com/ericclemmons/react-resolver)\n  Works similar, but isn't integrated with redux.\n\n**Redux Connect** uses awesome [Redux](https://github.com/reactjs/redux) to keep all fetched data in state.\nThis integration gives you agility:\n\n- you can react on fetching actions like data loading or load success in your own reducers\n- you can create own middleware to handle Redux Async Connect actions\n- you can connect to loaded data anywhere else, just using simple redux @connect\n- finally, you can debug and see your data using Redux Dev Tools\n\nAlso it's integrated with [React Router](https://github.com/rackt/react-router) to prevent routing transition\nuntil data is loaded.\n\n## Contributors\n- [Vitaly Aminev](https://en.makeomatic.ru)\n- [Eliseu Monar](https://github.com/eliseumds)\n- [Rui Araújo](https://github.com/ruiaraujo)\n- [Rodion Salnik](https://github.com/sars)\n- [Rezonans team](https://github.com/Rezonans)\n\n## Collaboration\nYou're welcome to PR, and we appreciate any questions or issues, please [open an issue](https://github.com/makeomatic/redux-connect/issues)!\n",
  "readmeFilename": "README.MD",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/makeomatic/redux-connect.git"
  },
  "scripts": {
    "build": "rm -rf ./lib; NODE_ENV=production babel ./modules -d lib --ignore '__tests__'",
    "lint": "eslint ./modules",
    "prepublish": "npm run lint && npm run build",
    "test": "npm run lint && jest"
  },
  "version": "2.4.0"
}
