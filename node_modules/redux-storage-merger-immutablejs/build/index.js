'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _lodash = require('lodash.isarray');

var _lodash2 = _interopRequireDefault(_lodash);

var _lodash3 = require('lodash.isfunction');

var _lodash4 = _interopRequireDefault(_lodash3);

var _lodash5 = require('lodash.isobject');

var _lodash6 = _interopRequireDefault(_lodash5);

var _lodash7 = require('lodash.merge');

var _lodash8 = _interopRequireDefault(_lodash7);

var _immutable = require('immutable');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

exports['default'] = function (oldState, newState) {
    // Whole state is ImmutableJS? Easiest way to merge
    if ((0, _lodash4['default'])(oldState.mergeDeep)) {
        return oldState.mergeDeep(newState);
    }

    // newState is ImmutableJS? We can safely use fromJS and merge
    if ((0, _lodash4['default'])(newState.mergeDeep)) {
        return (0, _immutable.fromJS)(oldState).mergeDeep(newState);
    }

    // Otherwise we need to carefully merge to avoid deprecated warnings from
    // ImmutableJS see #8. We inspect only the first object level, as this is
    // a common pattern with redux!
    var result = _extends({}, oldState);
    for (var key in newState) {
        if (!newState.hasOwnProperty(key)) {
            continue;
        }
        var value = newState[key];

        // Assign if we don't need to merge at all
        if (!result.hasOwnProperty(key)) {
            result[key] = (0, _lodash6['default'])(value) && !(0, _lodash2['default'])(value) ? (0, _lodash8['default'])({}, value) : value;
            continue;
        }

        var oldValue = result[key];

        if (!!oldValue && (0, _lodash4['default'])(oldValue.mergeDeep)) {
            result[key] = oldValue.mergeDeep(value);
        } else if (!!value && (0, _lodash4['default'])(value.mergeDeep)) {
            result[key] = (0, _immutable.fromJS)(oldValue).mergeDeep(value);
        } else if ((0, _lodash6['default'])(value) && !(0, _lodash2['default'])(value)) {
            result[key] = (0, _lodash8['default'])({}, oldValue, value);
        } else {
            result[key] = value;
        }
    }

    return result;
};